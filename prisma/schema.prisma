generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  Podcast                Podcast[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Podcast {
  id            String    @id @default(cuid())
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  channel       String?
  channelId     String    @unique
  guildId       String
  title         String?
  description   String?
  siteUrl       String?
  feedUrl       String?
  imageUrl      String?
  author        String?
  lastMessageId String?
  published     Boolean   @default(false)
  licenseId     String?
  Episode       Episode[]

  User    User     @relation(fields: [userId], references: [id])
  License License? @relation(fields: [licenseId], references: [id])

  @@map(name: "podcasts")
}

model Episode {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  summary   String
  audioUrl  String
  podcastId String
  Podcast   Podcast  @relation(fields: [podcastId], references: [id])

  @@map(name: "episodes")
}

model License {
  id          String    @id @default(cuid())
  guildId     String
  channelId   String    @unique
  licenseKey  String    @unique
  description String?
  createdAt   DateTime  @default(now())
  Podcast     Podcast[]

  @@map(name: "licenses")
}
